import * as BrowserstackLocalLauncher from 'browserstack-local';
import type { Capabilities, Services, Options } from '@wdio/types';
import type { BrowserstackConfig, App, AppConfig, AppUploadResponse } from './types';
type BrowserstackLocal = BrowserstackLocalLauncher.Local & {
    pid?: number;
    stop(callback: (err?: any) => void): void;
};
export default class BrowserstackLauncherService implements Services.ServiceInstance {
    private _options;
    private _config;
    browserstackLocal?: BrowserstackLocal;
    constructor(_options: BrowserstackConfig & Options.Testrunner, capabilities: Capabilities.RemoteCapability, _config: Options.Testrunner);
    onPrepare(config?: Options.Testrunner, capabilities?: Capabilities.RemoteCapabilities): Promise<unknown>;
    onComplete(): true | Promise<unknown> | undefined;
    _uploadApp(app: App): Promise<AppUploadResponse>;
    /**
     * @param  {String | AppConfig}  appConfig    <string>: should be "app file path" or "app_url" or "custom_id" or "shareable_id".
     *                                            <object>: only "path" and "custom_id" should coexist as multiple properties.
     */
    _validateApp(appConfig: AppConfig | string): Promise<App>;
    _updateCaps(capabilities?: Capabilities.RemoteCapabilities, capType?: string, value?: string): void;
}
export {};
//# sourceMappingURL=launcher.d.ts.map